security:
  enable_authenticator_manager: true
  # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
  password_hashers:
    Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'sodium'
    App\Entity\User:
      algorithm: sodium
      cost: 4
      time_cost: 3 
      memory_cost: 10
  # role_hierarchy:
  #   ROLE_ADMIN: ROLE_USER
  #   ROLE_SUPER_ADMIN: [ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH]

  # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
  providers:
    # used to reload user from session & other features (e.g. switch_user)
    # Le provider est la façon de récupérer un élément, on précise que c'est une entité et la propriété qui va permettre d'identifier de façon unique un utilisateur.
    app_user_provider:
      entity:
        class: App\Entity\User
        property: email
    # used to reload user from session & other features (e.g. switch_user)
    # used to reload user from session & other features (e.g. switch_user)
  firewalls:
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false
    main:
      lazy: true
      # Par défaut, il y a une limite de 5 connexions
      provider: app_user_provider
      remember_me:
        secret: '@kernel.secret'
        # Ce secret sera utilisé pour crypter le cookie. On peut créer une session à partir du cookie rememberme.
        # Le cookie sera conservé pendant un an par défaut
        # Différence entre session créée à partir du cookie remember
      login_throttling:
        max_attempts: 4
        interval: '10 minutes'
        # Fixer le nombre de tentatives et un intervalle pendant lequel on ne pourra pas se connecter
      # on précise la façon pour pouvoir se connecter
      custom_authenticator: App\Security\LoginFormAuthenticator
      logout:
        path: app_logout
        # where to redirect after logout
        target: app_home

      # activate different ways to authenticate
      # https://symfony.com/doc/current/security.html#the-firewall

      # https://symfony.com/doc/current/security/impersonating_user.html
      # switch_user: true

  # Easy way to control access for large sections of your site
  # Note: Only the *first* access control that matches will be used
  access_control:
    # On définie ci-dessous les différents rôles.
    - { path: ^/super_admin, roles: SUPER_ADMIN }
    - { path: ^/admin, roles: ROLE_ADMIN }
    - { path: ^/profil, roles: ROLE_USER }

when@test:
  security:
    password_hashers:
      # By default, password hashers are resource intensive and take time. This is
      # important to generate secure password hashes. In tests however, secure hashes
      # are not important, waste resources and increase test times. The following
      # reduces the work factor to the lowest possible values.
      Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
        algorithm: sodium
        cost: 4 # Lowest possible value for bcrypt
        time_cost: 3 # Lowest possible value for argon
        memory_cost: 10 # Lowest possible value for argon
